---
// --- FRONTMATTER ---
// Recibimos la lista de todos los Pokémon desde la página principal.
const { allPokemons } = Astro.props;
---

<!-- =================================================================== -->
<!-- === ESTRUCTURA HTML (La parte visual de nuestro componente) === -->
<!-- =================================================================== -->

<!-- Contenedor principal de la Pokédex -->
<div id="pokedex-container">
  <div class="search-bar">
    <input type="text" id="search-input" placeholder="Buscar Pokémon por nombre...">
  </div>

  <div id="loader" class="loader" style="display: none;">
    <div class="pokeball"></div>
  </div>

  <div id="pokedex-grid" class="pokedex-grid"></div>

  <div class="pagination">
    <button id="prev-button">Anterior</button>
    <span id="page-info"></span>
    <button id="next-button">Siguiente</button>
  </div>
</div>

<!-- Estructura del Modal (inicialmente oculta) -->
<div id="modal-overlay" class="modal-overlay">
  <!-- El contenido de este modal se generará dinámicamente con JavaScript -->
</div>

<!-- =================================================================== -->
<!-- === ESTILOS (El diseño de nuestro componente) === -->
<!-- =================================================================== -->
<style is:global>
  /* --- Estilos Generales del Componente --- */
  .search-bar { text-align: center; margin: 1rem 0 2rem; }
  #search-input { width: 90%; max-width: 400px; padding: 0.75rem; border-radius: 2rem; border: 1px solid #555; background-color: #444; color: white; font-size: 1rem; text-align: center; }
  #search-input::placeholder { color: #aaa; }

  .pokedex-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, 150px);
    gap: 1rem;
    padding: 1rem;
    justify-content: center;
    position: relative;
    min-height: 400px;
  }

  .pagination { 
    display: flex; 
    justify-content: center; 
    align-items: center; 
    gap: 1.5rem; 
    margin: 2rem 0; 
  }
  
  .pagination button { 
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
    padding: 0.8rem 1.5rem;
    border-radius: 25px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    position: relative;
    overflow: hidden;
  }
  
  .pagination button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  
  .pagination button:hover::before {
    left: 100%;
  }
  
  .pagination button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
  }
  
  .pagination button:active {
    transform: translateY(0);
    box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
  }
  
  .pagination button:disabled { 
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
    color: #adb5bd;
    cursor: not-allowed;
    transform: none;
    box-shadow: 0 2px 8px rgba(108, 117, 125, 0.2);
  }
  
  .pagination button:disabled::before {
    display: none;
  }
  
  .pagination button:disabled:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(108, 117, 125, 0.2);
    background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
  }
  
  #page-info {
    background: rgba(255, 255, 255, 0.1);
    padding: 0.5rem 1rem;
    border-radius: 15px;
    font-weight: 500;
    color: #ffffff;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    font-size: 0.9rem;
  }

  /* --- Estilos del Loader de Pokébola --- */
  .loader { 
    display: flex; 
    justify-content: center; 
    align-items: center; 
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(51, 51, 51, 0.8);
    border-radius: 12px;
    z-index: 10;
  }
  .pokeball { 
    width: 80px; 
    height: 80px; 
    background-color: #fff; 
    border-radius: 50%; 
    position: relative; 
    border: 4px solid #333; 
    animation: shake 1.2s cubic-bezier(.36,.07,.19,.97) infinite; 
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }
  .pokeball:before, .pokeball:after { content: ""; position: absolute; }
  .pokeball:before { 
    background-color: #f00; 
    width: 100%; 
    height: 50%; 
    border-radius: 0; 
    top: 0;
    left: 0;
  }
  .pokeball:after { 
    top: 50%; 
    left: 50%; 
    width: 16px; 
    height: 16px; 
    background: #fff; 
    border-radius: 50%; 
    border: 3px solid #333; 
    z-index: 2; 
    transform: translate(-50%, -50%);
  }
  @keyframes shake { 0%, 100% { transform: rotate(0); } 50% { transform: rotate(360deg); } }

  /* --- Estilos del Modal (Versión Final y Robusta) --- */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.85);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 20px;
    box-sizing: border-box;
  }
  .modal-window {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: 320px;
    max-height: 85vh;
    background-color: #ffffff;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.5);
    overflow: hidden;
    color: #333;
    animation: modalFadeIn 0.25s ease-out;
  }
  
  @keyframes modalFadeIn {
    from { 
      opacity: 0; 
      transform: scale(0.8) translateY(50px); 
    }
    to { 
      opacity: 1; 
      transform: scale(1) translateY(0); 
    }
  }
  
  .modal-close {
    position: absolute;
    top: 6px;
    right: 6px;
    width: 24px;
    height: 24px;
    background: rgba(255, 255, 255, 0.95);
    border: none;
    border-radius: 50%;
    color: #333;
    font-size: 14px;
    font-weight: bold;
    cursor: pointer;
    z-index: 1001;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    transition: all 0.2s ease;
  }
  
  .modal-close:hover {
    background: rgba(255, 255, 255, 1);
    transform: scale(1.1);
  }
    color: white;
    font-size: 16px;
    line-height: 32px;
    cursor: pointer;
    z-index: 20;
  }
  .modal-header {
    position: relative;
    text-align: center;
    padding: 1.2rem 1rem 0.8rem;
    flex-shrink: 0;
    border-radius: 12px 12px 0 0;
    background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
  }
  .modal-pokemon-image {
    width: 100%;
    max-width: 120px;
    height: 120px;
    object-fit: contain;
    margin: 0 auto;
    display: block;
    filter: drop-shadow(0 3px 6px rgba(0,0,0,0.3));
  }
  .modal-pokemon-image:hover {
    transform: scale(1.05);
  }
  .modal-body {
    padding: 0.8rem;
    flex-grow: 1;
    overflow-y: auto;
    min-height: 0;
    background-color: #ffffff;
  }
  .pokemon-name { 
    text-transform: capitalize; 
    font-size: 1.3rem; 
    text-align: center; 
    margin: 0 0 0.6rem; 
    font-weight: bold;
    color: #1a1a1a;
  }
  .pokemon-id { 
    color: #666; 
    font-size: 0.9rem; 
    font-weight: normal;
  }
  .types-container { 
    display: flex; 
    justify-content: center; 
    gap: 0.4rem; 
    margin-bottom: 0.8rem; 
  }
  .type-tag { 
    padding: 0.25rem 0.6rem; 
    border-radius: 15px; 
    color: white; 
    text-transform: uppercase; 
    font-size: 0.65rem; 
    font-weight: bold; 
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  }
  .info-section { 
    margin-bottom: 0.8rem; 
    background-color: #f8f9fa;
    padding: 0.6rem;
    border-radius: 6px;
    border: 1px solid #e9ecef;
  }
  .info-section h3 { 
    margin: 0 0 0.4rem; 
    font-size: 0.8rem; 
    text-align: center; 
    border-bottom: 1px solid #dee2e6; 
    padding-bottom: 0.25rem; 
    font-weight: bold; 
    color: #495057; 
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }
  .info-section p { 
    margin: 0; 
    text-transform: capitalize; 
    text-align: center; 
    font-size: 0.8rem; 
    color: #6c757d;
    line-height: 1.3;
  }
  .physical-info { 
    display: flex; 
    justify-content: space-around; 
    text-align: center; 
  }
  .physical-info > div {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
  }
  .physical-info span {
    font-weight: bold;
    color: #495057;
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }
  .physical-info p {
    font-size: 0.9rem;
    font-weight: bold;
    color: #212529;
    margin: 0;
  }
  .stats-list { 
    list-style: none; 
    padding: 0; 
    font-size: 0.75rem; 
  }
  .stats-list li { 
    display: grid; 
    grid-template-columns: 70px 25px 1fr; 
    align-items: center; 
    gap: 0.4rem; 
    margin-bottom: 0.4rem; 
    text-transform: capitalize; 
    padding: 0.25rem;
    background-color: #ffffff;
    border-radius: 4px;
    border: 1px solid #e9ecef;
  }
  .stat-name { 
    font-weight: 600; 
    color: #495057;
    font-size: 0.7rem;
  }
  .stat-value { 
    font-weight: bold; 
    text-align: right; 
    color: #212529;
    font-size: 0.75rem;
  }
  .stat-bar-container { 
    width: 100%; 
    background-color: #e9ecef; 
    border-radius: 6px; 
    height: 5px; 
    overflow: hidden;
  }
  .stat-bar { 
    height: 100%; 
    background: linear-gradient(90deg, #4ade80 0%, #22c55e 50%, #16a34a 100%); 
    border-radius: 6px; 
    transition: width 0.3s ease;
  }

  /* --- Estilos de las Cards de Pokémon --- */
  .pokemon-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: #ffffff;
    border-radius: 12px;
    padding: 1rem;
    text-decoration: none;
    color: #333;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    border: 2px solid transparent;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-transform: capitalize;
    width: 150px;
    height: 180px;
    box-sizing: border-box;
  }
  
  .pokemon-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
    border-color: #ddd;
  }
  
  .pokemon-card img {
    width: 80px;
    height: 80px;
    object-fit: contain;
    transition: transform 0.3s ease;
    margin-bottom: 0.5rem;
  }
  
  .pokemon-card:hover img {
    transform: scale(1.1);
  }
  
  .pokemon-card h2 {
    margin: 0;
    font-size: 1rem;
    text-transform: capitalize;
    text-align: center;
    color: #333;
    font-weight: 600;
  }

  /* Animación de Flip para Cambio de Página */
  .pokemon-card.flipping {
    animation: flipOut 0.3s ease-in-out;
  }
  
  .pokemon-card.flip-in {
    animation: flipIn 0.3s ease-in-out;
  }
  
  @keyframes flipOut {
    0% { transform: rotateY(0deg) scale(1); }
    50% { transform: rotateY(90deg) scale(0.8); }
    100% { transform: rotateY(90deg) scale(0.8); }
  }
  
  @keyframes flipIn {
    0% { transform: rotateY(-90deg) scale(0.8); }
    50% { transform: rotateY(-90deg) scale(0.8); }
    100% { transform: rotateY(0deg) scale(1); }
  }

  /* Colores dinámicos para el header y las etiquetas */
  .grass { background-color: #78C850; }
  .fire { background-color: #F08030; }
  .water { background-color: #6890F0; }
  .bug { background-color: #A8B820; }
  .normal { background-color: #A8A878; }
  .poison { background-color: #A040A0; }
  .electric { background-color: #F8D030; }
  .ground { background-color: #E0C068; }
  .fairy { background-color: #EE99AC; }
  .fighting { background-color: #C03028; }
  .psychic { background-color: #F85888; }
  .rock { background-color: #B8A038; }
  .ghost { background-color: #705898; }
  .ice { background-color: #98D8D8; }
  .dragon { background-color: #7038F8; }
  .steel { background-color: #B8B8D0; }
  .dark { background-color: #705848; }
  .flying { background-color: #A890F0; }

  /* --- Estilos del Loader del Modal --- */
  .pokeball-modal { 
    width: 60px; 
    height: 60px; 
    background-color: #fff; 
    border-radius: 50%; 
    position: relative; 
    border: 3px solid #333; 
    animation: shake 1.2s cubic-bezier(.36,.07,.19,.97) infinite; 
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }
  .pokeball-modal:before, .pokeball-modal:after { content: ""; position: absolute; }
  .pokeball-modal:before { 
    background-color: #f00; 
    width: 100%; 
    height: 50%; 
    border-radius: 0; 
    top: 0;
    left: 0;
  }
  .pokeball-modal:after { 
    top: 50%; 
    left: 50%; 
    width: 12px; 
    height: 12px; 
    background: #fff; 
    border-radius: 50%; 
    border: 2px solid #333; 
    z-index: 2; 
    transform: translate(-50%, -50%);
  }
</style>


<script define:vars={{ allPokemons }}>
  // --- OBTENER ELEMENTOS DEL DOM ---
  const searchInput = document.getElementById('search-input');
  const grid = document.getElementById('pokedex-grid');
  const loader = document.getElementById('loader');
  const prevButton = document.getElementById('prev-button');
  const nextButton = document.getElementById('next-button');
  const pageInfo = document.getElementById('page-info');
  const modalOverlay = document.getElementById('modal-overlay');


  let currentPage = 1;
  const itemsPerPage = 28;
  let currentFilter = '';
  let debounceTimer;


  function render() {
    const filteredPokemons = allPokemons.filter(p => p.name.toLowerCase().includes(currentFilter));
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const paginatedPokemons = filteredPokemons.slice(start, end);

    // Añadir animación de flip out a las cards existentes
    const existingCards = grid.querySelectorAll('.pokemon-card');
    if (existingCards.length > 0) {
      existingCards.forEach(card => card.classList.add('flipping'));
      
      // Esperar a que termine la animación de salida antes de cambiar el contenido
      setTimeout(() => {
        updateGridContent(paginatedPokemons, filteredPokemons);
      }, 150);
    } else {
      // Si no hay cards existentes, mostrar directamente
      updateGridContent(paginatedPokemons, filteredPokemons);
    }
  }

  // Función auxiliar para actualizar el contenido del grid
  function updateGridContent(paginatedPokemons, filteredPokemons) {
    grid.innerHTML = '';
    loader.style.display = 'none';
      
    if (paginatedPokemons.length === 0) {
      grid.innerHTML = '<p>No se encontraron Pokémon.</p>';
    } else {
      paginatedPokemons.forEach(pokemon => {
        const id = pokemon.url.split('/')[6];
        const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;
        grid.innerHTML += `
          <a href="/pokemon/${id}" class="pokemon-card flip-in">
            <img src="${imageUrl}" alt="Imagen de ${pokemon.name}" loading="lazy" />
            <h2>${pokemon.name}</h2>
          </a>`;
      });
      
      // Remover la clase flip-in después de la animación
      setTimeout(() => {
        const newCards = grid.querySelectorAll('.pokemon-card');
        newCards.forEach(card => card.classList.remove('flip-in'));
      }, 300);
    }

    const totalPages = Math.ceil(filteredPokemons.length / itemsPerPage);
    pageInfo.textContent = `Página ${currentPage} de ${totalPages || 1}`;
    prevButton.disabled = currentPage === 1;
    nextButton.disabled = currentPage === totalPages || totalPages === 0;
  }

  // Obtiene datos y muestra el modal con detalles del Pokémon
async function showPokemonDetails(id) {
  // Mostrar el modal con loader inmediatamente
  modalOverlay.style.display = 'flex';
  modalOverlay.innerHTML = `
    <div class="modal-window">
      <button class="modal-close">×</button>
      <div style="display: flex; justify-content: center; align-items: center; height: 400px; background-color: rgba(51, 51, 51, 0.9);">
        <div class="pokeball-modal"></div>
      </div>
    </div>
  `;

  try {
    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`);
    if (!response.ok) throw new Error('No se pudo cargar la información.');
    const pokemon = await response.json();

    // Preparar datos
    const types = pokemon.types.map(t => `<span class="type-tag ${t.type.name}">${t.type.name}</span>`).join('');
    const abilities = pokemon.abilities.map(a => a.ability.name.replace('-', ' ')).join(', ');
    const mainType = pokemon.types[0].type.name;

    // Colores para cada tipo
    const typeColors = {
      grass: '#78C850',
      fire: '#F08030', 
      water: '#6890F0',
      bug: '#A8B820',
      normal: '#A8A878',
      poison: '#A040A0',
      electric: '#F8D030',
      ground: '#E0C068',
      fairy: '#EE99AC',
      fighting: '#C03028',
      psychic: '#F85888',
      rock: '#B8A038',
      ghost: '#705898',
      ice: '#98D8D8',
      dragon: '#7038F8',
      steel: '#B8B8D0',
      dark: '#705848',
      flying: '#A890F0'
    };

    const primaryColor = typeColors[mainType] || '#6366f1';
    const secondaryColor = typeColors[pokemon.types[1]?.type.name] || primaryColor;

    // Construir el HTML completo del modal
    modalOverlay.innerHTML = `
      <div class="modal-window">
        <button class="modal-close">×</button>
        <div class="modal-header" style="background: linear-gradient(135deg, ${primaryColor} 0%, ${secondaryColor} 100%);">
          <img src="${pokemon.sprites.other['official-artwork'].front_default}" alt="${pokemon.name}" class="modal-pokemon-image">
        </div>
        <div class="modal-body">
          <h2 class="pokemon-name">${pokemon.name} <span class="pokemon-id">#${String(pokemon.id).padStart(3, '0')}</span></h2>
          <div class="types-container">${types}</div>
          <div class="info-section">
            <h3>Abilities</h3>
            <p>${abilities}</p>
          </div>
          <div class="info-section">
            <h3>Physical</h3>
            <div class="physical-info">
              <div><span>Height</span><p>${pokemon.height / 10} m</p></div>
              <div><span>Weight</span><p>${pokemon.weight / 10} kg</p></div>
            </div>
          </div>
          <div class="info-section">
            <h3>Base Stats</h3>
            <ul class="stats-list">
              ${pokemon.stats.map(s => `
                <li>
                  <span class="stat-name">${s.stat.name.replace('-', ' ')}</span>
                  <span class="stat-value">${s.base_stat}</span>
                  <div class="stat-bar-container">
                    <div class="stat-bar" style="width: ${Math.min((s.base_stat / 200) * 100, 100)}%;"></div>
                  </div>
                </li>
              `).join('')}
            </ul>
          </div>
        </div>
      </div>
    `;

  } catch (error) {
    modalOverlay.innerHTML = `
      <div class="modal-window">
        <button class="modal-close">×</button>
        <div style="padding: 2rem; text-align: center;">
          <p>Error: ${error.message}</p>
        </div>
      </div>
    `;
  }
}

  // --- EVENT LISTENERS ---

  searchInput.addEventListener('input', (e) => {
    clearTimeout(debounceTimer);
    grid.innerHTML = '';
    loader.style.display = 'flex';
    debounceTimer = setTimeout(() => {
      currentFilter = e.target.value.toLowerCase();
      currentPage = 1;
      render();
    }, 500);
  });

  prevButton.addEventListener('click', () => { if (currentPage > 1) { currentPage--; render(); } });
  nextButton.addEventListener('click', () => { currentPage++; render(); });

  grid.addEventListener('click', (e) => {
    const card = e.target.closest('.pokemon-card');
    if (card) {
      e.preventDefault();
      const id = card.getAttribute('href').split('/')[2];
      showPokemonDetails(id);
    }
  });

  // Delegación de eventos para cerrar el modal
  modalOverlay.addEventListener('click', (e) => {
    if (e.target === modalOverlay || e.target.classList.contains('modal-close')) {
      modalOverlay.style.display = 'none';
    }
  });

  // --- INICIO ---
  render();
</script>